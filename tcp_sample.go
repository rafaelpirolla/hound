// /////////////////////////////////////////////////////////////////////////////

package main

// /////////////////////////////////////////////////////////////////////////////

import (
	"time"
)

// /////////////////////////////////////////////////////////////////////////////
// TYPES
// /////////////////////////////////////////////////////////////////////////////

type Sample interface {
	CalculateRTT(*TCPPacket)
}

type TCPSample struct {
	TsVal       uint32
	Timestamp   time.Time
	ExpectedAck uint32
	Rtt         float64
}

type SampleMap map[uint32]*TCPSample

// /////////////////////////////////////////////////////////////////////////////
// METHODS
// /////////////////////////////////////////////////////////////////////////////

func NewTCPSample(p *TCPPacket) (*TCPSample, error) {
	sp := new(TCPSample)

	(*sp).TsVal, _ = (*p).GetTimestamps()
	(*sp).Timestamp = (*p).MetaData.Timestamp
	(*sp).ExpectedAck = (*p).GetExtepctedAck()
	(*sp).Rtt = 0

	return sp, nil
}

// /////////////////////////////////////////////////////////////////////////////

func (sp *TCPSample) CalculateRTT(p *TCPPacket) {
	if (*sp).Rtt == 0 {
		(*sp).Rtt = (*p).MetaData.Timestamp.Sub((*sp).Timestamp).Seconds()
	}
}

// /////////////////////////////////////////////////////////////////////////////
